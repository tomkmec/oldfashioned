{"version":3,"sources":["ui/main/PlaylistActions.ts","logo.svg","ui/App.tsx","reportWebVitals.ts","state.ts","ui/main/NowPlayingReducer.ts","ui/reducers.ts","persistence/localStorage.ts","station/station.ts","station/index.ts","index.tsx"],"names":["station","_inject","s","createAction","toggleFav","createAsyncThunk","id","a","togglePlay","mapDispatch","connector","connect","state","playing","nowPlaying","props","className","src","logo","alt","href","target","rel","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","emptyState","entry","showInPlaylist","sourceId","metadata","name","description","iconURL","defaultSceneConfiguration","sourceConfigurationItems","requiredPlayerCapabilities","type","language","text","canFavorite","isFavorite","playHistory","playlist","configuration","sources","scenes","reducer","createReducer","builder","addCase","action","fulfilled","payload","combineReducers","NowPlayingReducer","key","storage","loadState","serializedState","localStorage","getItem","JSON","parse","e","console","error","setItem","StationImpl","previousState","fav","this","ms","Promise","resolve","setTimeout","delay","log","createStation","implementation","persistence","storedState","store","configureStore","rootReducer","middleware","thunkMiddleware","preloadedState","ReactDOM","render","StrictMode","document","getElementById","init"],"mappings":"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","file":"static/js/main.a92ca342.chunk.js","sourcesContent":["import { createAction, createAsyncThunk } from '@reduxjs/toolkit'\nimport { PlaylistEntry } from '../../plugins/api';\n\nimport Station from '../../station'\nvar station: Station\n\nexport function _inject(s: Station) {\n  station = s;\n}\n\n/**\n * Rule of thumb for actions vs. thunks:\n * - store CAN be source of truth (playlist, history, etc.) => actions\n * - store only reflects the actual source of truth (paused, favorited) => thunks\n */\n\nexport const clearPlaylist = createAction(\"playlist/clear\");\nexport const replacePlaylist = createAction<PlaylistEntry[]>(\"playlist/replaceAll\");\nexport const appendPlaylist = createAction<PlaylistEntry[]>(\"playlist/appendAll\");\nexport const removeFromPlaylist = createAction<string>(\"playlist/remove\");\n\nexport const toggleFav = createAsyncThunk(\"playlist/toggleFav\", async (id: string) => {\n  return station.toggleFav(id)\n});\n\nexport const togglePlay = createAsyncThunk(\"playlist/togglePlay\", async () => {\n  return station.togglePlay()\n});\n\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport logo from '../logo.svg';\nimport './App.css';\nimport State from '../state'\n\nimport { togglePlay, toggleFav } from './main/PlaylistActions'\n\nconst mapState = (state: State) => ({\n  playing: state.nowPlaying.playing\n})\n\nconst mapDispatch = {\n  togglePlay: togglePlay,\n  toggleFav: toggleFav\n}\n\nconst connector = connect(mapState, mapDispatch)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux & {}\n\nfunction App(props: Props) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <button onClick={props.togglePlay} >{props.playing?'>':'||'}</button>\n        <button onClick={() => props.toggleFav('1')} >&lt;3</button>\n      </header>\n    </div>\n  );\n}\n\nexport default connector(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as api from './plugins/api'\n\ninterface State {\n  nowPlaying: {\n    playing: boolean,\n    entry: api.PlaylistEntry\n  },\n  playlist: api.PlaylistEntry[],\n  playHistory: api.PlayedPlaylistEntry[],\n  configuration: {\n    sources: {\n      id: string, pluginId: string, name: string\n    }[],\n    scenes: {\n      key: string, name: string\n    }[]\n  }\n}\n\nconst emptyState: State = {\n  nowPlaying: {\n    playing: false,\n    entry: {\n      showInPlaylist: false,\n      sourceId: '',\n      metadata: {\n        id: '',\n        name: '',\n        description: '',\n        iconURL: '',\n        defaultSceneConfiguration: {},\n        sourceConfigurationItems: [],\n        requiredPlayerCapabilities: []\n      },\n      entry: {\n        type: 'announcement',\n        language: '',\n        text: '',\n        canFavorite: false, isFavorite: false\n      }\n    }\n  },\n  playHistory: [],\n  playlist: [],\n  configuration: {\n    sources: [],\n    scenes: []\n  }\n}\n\nexport default State;\nexport { emptyState }","import { createReducer } from '@reduxjs/toolkit'\nimport * as action from './PlaylistActions'\nimport { emptyState } from '../../state'\n\nconst reducer = createReducer(emptyState.nowPlaying, (builder) => {\n  builder.addCase(action.togglePlay.fulfilled, (state, action) => { \n    state.playing = action.payload;\n  })\n})\n\nexport default reducer;","\nimport { combineReducers } from 'redux'\nimport NowPlayingReducer from './main/NowPlayingReducer'\n\nexport default combineReducers({\n  nowPlaying: NowPlayingReducer\n})","import { emptyState } from '../state'\n\nconst key = \"oldfashioned/state\"\n\nconst storage = {\n  loadState: () => { \n    const serializedState = localStorage.getItem(key);\n    if (serializedState !== null) {\n      try {\n        return JSON.parse(serializedState);\n      } catch (e) {\n        console.error(\n          `Failed to parse previously saved state from local storage. \n          Corrupted, or the format might have changed.\n          Saving the state as '${key}-debug' for reference/debug`);\n        localStorage.setItem(`${key}-debug`, serializedState);\n      }\n    }\n    return emptyState;\n  }\n}\n\nexport default storage","import Station from '.';\nimport State from '../state';\n\nexport default class StationImpl implements Station {\n  private playing = false;\n  private fav = false;\n\n  constructor(previousState: State) {\n    this.playing = previousState.nowPlaying.playing;\n  }\n\n  async delay(ms: number) {\n    return new Promise( resolve => setTimeout(resolve, ms) );\n  }\n  async togglePlay() {\n    await this.delay(500)\n    this.playing = !this.playing\n    return this.playing\n  }\n\n  async toggleFav(id: string) {\n    console.log(id, this.fav)\n    await this.delay(500)\n    this.fav = !this.fav\n    return this.fav\n  }\n\n}","import State from '../state';\nimport implementation from './station'\n\nexport default interface Station {\n  togglePlay: () => Promise<boolean>;\n  toggleFav: (id: string) => Promise<boolean>;\n}\n\nexport function createStation(state: State): Station {\n  return new implementation(state);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './ui/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport { _inject } from './ui/main/PlaylistActions'\n\nimport rootReducer from './ui/reducers'\n\nimport persistence from './persistence/localStorage'\n\nimport {createStation} from './station'\n\nimport thunkMiddleware from 'redux-thunk'\n\nasync function init() {\n  const storedState = await persistence.loadState();\n  const station = createStation(storedState);\n  \n  _inject(station)\n  \n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [thunkMiddleware],\n    preloadedState: storedState\n  });\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\ninit();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}